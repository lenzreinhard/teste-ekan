package com.ekan.teste.controller;

import java.io.IOException;
import java.util.Date;
import java.util.Optional;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.ekan.teste.entity.Documento;

import com.ekan.teste.repository.DocumentoRepository;

import com.ekan.teste

@RestController
@RequestMapping("/documento")
@CrossOrigin
public class DocumentoController {
	
	@Autowired
	private StorageFile service; 
	
	private final DocumentoRepository documentoRepository;
	DocumentoController(DocumentoRepository documentoRepository) {
        this.documentoRepository = documentoRepository;
    }
	
	@GetMapping
	public Iterable<Documento> listar() {
		return this.documentoRepository.findAll();
	}
	
	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	public ResponseEntity<Object> adicionar(@RequestParam("Documento")MultipartFile doc,@RequestBody Documento documento) throws IOException
	{
		documento.setDataInclusao(new Date());
		documento.setDataAtualizacao(new Date());
		String resp = service.uploadFile(doc);
		if (resp!="Erro ao salvar documento!")
		{
			documento.setDocumento(doc.getBytes());
			return ResponseEntity.status(HttpStatus.OK).body(this.documentoRepository.save(documento));
		}
		return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Documento n達o encontrado!");
	}
	
	@PutMapping("/{id}")
	public ResponseEntity<Object> atualizar(@PathVariable(value="id")Long id,@RequestParam("Documento")MultipartFile doc,@RequestBody Documento documento) throws IOException
	{
		documento.setDataAtualizacao(new Date());
		String resp = service.uploadFile(doc);
		if (resp!="Erro ao salvar documento!")
		{
			documento.setDocumento(doc.getBytes());
			Optional<Documento> documentoToUpdate = this.documentoRepository.findById(id);
			if(!documentoToUpdate.isPresent())
			{
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Documento n達o encontrado!");
			}
			documento.setDataInclusao(documentoToUpdate.get().getDataInclusao());
			Documento documentoDTO = new Documento();
			BeanUtils.copyProperties(documento, documentoDTO);
			documentoDTO.setId(documentoToUpdate.get().getId());
			return ResponseEntity.status(HttpStatus.OK).body(this.documentoRepository.save(documentoDTO));
		}
		return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Documento n達o encontrado!");
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<Object> delete(@PathVariable(value="id")Long id)
	{

		Optional<Documento> documentoUpdated = this.documentoRepository.findById(id);
		if(!documentoUpdated.isPresent())
		{
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Documento n達o encontrado!");
		}
		Documento documentoDTO = new Documento();
		BeanUtils.copyProperties(documentoUpdated.get(), documentoDTO);
		this.documentoRepository.deleteById(id);
		return ResponseEntity.status(HttpStatus.OK).body(documentoDTO);
	}
}
